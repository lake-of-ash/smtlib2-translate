(set-option :produce-proofs true)
(set-logic QF_NIA)
(define-fun rf ((x Int) (y Int)) Int (+ x y))
(define-fun si ((x Int) (y Int)) Bool (and (> x 0) (> y x)))
(define-const x0 Int 3)
(define-const y0 Int 1)
(assert (> y0 0))
(assert (> (rf x0 y0) 0))
(assert (si x0 y0))
(declare-const l_x0 Int)
(declare-const l_y0 Int)
(assert (> l_x0 0))
(define-const l_x1 Int (- l_x0 1))
(assert (> (rf l_x0 l_y0) 0))
(assert (si l_x0 l_y0))
(define-const not_ranking_invariant_1 Bool (not (> (rf l_x1 l_y0) 0)))
(define-const not_ranking_invariant_2 Bool (not (> (rf l_x0 l_y0) (rf l_x1 l_y0))))
(define-const not_supporting_invariant Bool (not (si l_x1 l_y0)))
(assert (or not_ranking_invariant_1 not_ranking_invariant_2 not_supporting_invariant))
(check-sat)
(get-model)
(exit)
